// ProofMeet Version 2.0 - Court Compliance System
// Database Schema for PostgreSQL
// Updated: October 7, 2024

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserType {
  COURT_REP
  PARTICIPANT
}

enum MeetingFormat {
  ONLINE
  IN_PERSON
  HYBRID
}

enum AttendanceStatus {
  IN_PROGRESS
  COMPLETED
  FLAGGED
}

enum ComplianceStatus {
  COMPLIANT
  AT_RISK
  NON_COMPLIANT
}

enum VerificationMethod {
  WEBCAM
  SCREEN_ACTIVITY
  BOTH
}

enum DigestStatus {
  PENDING
  SENT
  FAILED
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  
  // Role-based fields
  userType          UserType  @map("user_type")
  
  // Court Rep specific fields
  courtDomain       String?   @map("court_domain")
  courtName         String?   @map("court_name")
  badgeNumber       String?   @map("badge_number")
  
  // Participant specific fields
  caseNumber        String?   @map("case_number")
  courtRepId        String?   @map("court_rep_id")
  
  // Common profile fields
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  phoneNumber       String?   @map("phone_number")
  
  // Email verification
  isEmailVerified   Boolean   @default(false) @map("is_email_verified")
  verificationToken String?   @unique @map("verification_token")
  verificationTokenExpiry DateTime? @map("verification_token_expiry")
  
  // Status
  isActive          Boolean   @default(true) @map("is_active")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")
  
  // Relations
  courtRep          User?     @relation("CourtRepToParticipant", fields: [courtRepId], references: [id], onDelete: SetNull)
  participants      User[]    @relation("CourtRepToParticipant")
  
  // Court Rep relations
  requirementsSet   MeetingRequirement[] @relation("RequirementsCreatedBy")
  attendanceAsRep   AttendanceRecord[]   @relation("CourtRepAttendance")
  digestQueue       DailyDigestQueue[]
  
  // Participant relations
  requirements      MeetingRequirement[] @relation("ParticipantRequirements")
  attendance        AttendanceRecord[]   @relation("ParticipantAttendance")
  
  @@index([courtRepId])
  @@index([caseNumber])
  @@index([userType])
  @@index([email])
  @@map("users")
}

// ============================================
// MEETING REQUIREMENTS
// ============================================

model MeetingRequirement {
  id                        String   @id @default(uuid())
  participantId             String   @map("participant_id")
  courtRepId                String   @map("court_rep_id")
  
  // Requirements
  meetingsPerWeek           Int      @default(0) @map("meetings_per_week")
  meetingsPerMonth          Int      @default(0) @map("meetings_per_month")
  requiredPrograms          String[] @map("required_programs") // ['AA', 'NA', 'SMART']
  minimumDurationMinutes    Int      @default(60) @map("minimum_duration_minutes")
  minimumAttendancePercent  Decimal  @default(90.00) @map("minimum_attendance_percent") @db.Decimal(5, 2)
  
  // Metadata
  createdById               String   @map("created_by_id")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")
  isActive                  Boolean  @default(true) @map("is_active")
  
  // Relations
  participant               User     @relation("ParticipantRequirements", fields: [participantId], references: [id], onDelete: Cascade)
  courtRep                  User     @relation("RequirementsCreatedBy", fields: [createdById], references: [id])
  
  @@index([participantId])
  @@index([courtRepId])
  @@map("meeting_requirements")
}

// ============================================
// EXTERNAL MEETINGS (From APIs)
// ============================================

model ExternalMeeting {
  id                String         @id @default(uuid())
  externalId        String?        @unique @map("external_id") // ID from external API
  
  // Meeting details
  name              String
  program           String         // 'AA', 'NA', 'SMART', 'CMA', 'OA', 'GA'
  meetingType       String         @map("meeting_type")
  description       String?        @db.Text
  
  // Schedule
  dayOfWeek         String?        @map("day_of_week")
  time              String?        // Time in HH:MM format
  timezone          String         @default("PST")
  durationMinutes   Int?           @map("duration_minutes")
  
  // Format
  format            MeetingFormat
  zoomUrl           String?        @map("zoom_url") @db.Text
  zoomId            String?        @map("zoom_id")
  zoomPassword      String?        @map("zoom_password")
  location          String?
  address           String?        @db.Text
  
  // Metadata
  tags              String[]       @default([])
  hasProofCapability Boolean       @default(true) @map("has_proof_capability")
  lastSyncedAt      DateTime?      @map("last_synced_at")
  
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  
  // Relations
  attendance        AttendanceRecord[]
  
  @@index([program])
  @@index([format])
  @@index([dayOfWeek])
  @@map("external_meetings")
}

// ============================================
// ATTENDANCE TRACKING
// ============================================

model AttendanceRecord {
  id                  String            @id @default(uuid())
  
  // Core linkage
  participantId       String            @map("participant_id")
  courtRepId          String            @map("court_rep_id")
  externalMeetingId   String?           @map("external_meeting_id")
  
  // Meeting session info
  meetingName         String            @map("meeting_name")
  meetingProgram      String            @map("meeting_program")
  meetingDate         DateTime          @map("meeting_date") @db.Date
  
  // Timing
  joinTime            DateTime          @map("join_time")
  leaveTime           DateTime?         @map("leave_time")
  totalDurationMin    Int?              @map("total_duration_min")
  
  // Activity tracking
  activityTimeline    Json?             @map("activity_timeline") // Array of activity events
  activeDurationMin   Int?              @map("active_duration_min")
  idleDurationMin     Int?              @map("idle_duration_min")
  attendancePercent   Decimal?          @map("attendance_percent") @db.Decimal(5, 2)
  
  // Visual verification
  webcamSnapshotCount Int               @default(0) @map("webcam_snapshot_count")
  screenActivityLogs  Json?             @map("screen_activity_logs")
  verificationMethod  VerificationMethod? @map("verification_method")
  
  // Status
  status              AttendanceStatus  @default(IN_PROGRESS)
  isValid             Boolean           @default(true) @map("is_valid")
  
  // Flags
  flags               Json?             // Array of flag objects
  
  // Court Card
  courtCardGenerated  Boolean           @default(false) @map("court_card_generated")
  courtCardData       Json?             @map("court_card_data")
  courtCardSentAt     DateTime?         @map("court_card_sent_at")
  
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  
  // Relations
  participant         User              @relation("ParticipantAttendance", fields: [participantId], references: [id], onDelete: Cascade)
  courtRep            User              @relation("CourtRepAttendance", fields: [courtRepId], references: [id])
  externalMeeting     ExternalMeeting?  @relation(fields: [externalMeetingId], references: [id], onDelete: SetNull)
  courtCard           CourtCard?
  
  @@index([participantId])
  @@index([courtRepId])
  @@index([meetingDate])
  @@index([status])
  @@map("attendance_records")
}

// ============================================
// COURT CARDS (Legal Proof)
// ============================================

model CourtCard {
  id                    String           @id @default(uuid())
  attendanceRecordId    String           @unique @map("attendance_record_id")
  
  // Identification
  cardNumber            String           @unique @map("card_number") // CC-2024-12345-001
  participantEmail      String           @map("participant_email")
  participantName       String           @map("participant_name")
  caseNumber            String           @map("case_number")
  courtRepEmail         String           @map("court_rep_email")
  courtRepName          String           @map("court_rep_name")
  
  // Meeting details
  meetingId             String?          @map("meeting_id") // External meeting ID for tracking
  meetingName           String           @map("meeting_name")
  meetingProgram        String           @map("meeting_program")
  meetingDate           DateTime         @map("meeting_date") @db.Date
  meetingDurationMin    Int              @map("meeting_duration_min")
  
  // Attendance proof
  joinTime              DateTime         @map("join_time")
  leaveTime             DateTime         @map("leave_time")
  totalDurationMin      Int              @map("total_duration_min")
  activeDurationMin     Int              @map("active_duration_min")
  idleDurationMin       Int?             @map("idle_duration_min")
  attendancePercent     Decimal          @map("attendance_percent") @db.Decimal(5, 2)
  
  // Validation
  validationStatus      String           @default("PASSED") @map("validation_status") // PASSED, FAILED
  violations            Json             @default("[]") @map("violations") // Array of violation objects
  
  // Activity summary
  activePeriods         Json             @map("active_periods") // Detailed timeline
  verificationMethod    VerificationMethod @map("verification_method")
  confidenceLevel       String           @map("confidence_level") // HIGH, MEDIUM, LOW
  
  // Legal metadata
  generatedAt           DateTime         @default(now()) @map("generated_at")
  cardHash              String           @unique @map("card_hash") // SHA-256 for integrity
  isTampered            Boolean          @default(false) @map("is_tampered")
  
  // Export
  pdfUrl                String?          @map("pdf_url") @db.Text
  pdfGeneratedAt        DateTime?        @map("pdf_generated_at")
  
  // Relations
  attendanceRecord      AttendanceRecord @relation(fields: [attendanceRecordId], references: [id], onDelete: Cascade)
  
  @@index([participantEmail])
  @@index([caseNumber])
  @@index([meetingDate])
  @@index([cardNumber])
  @@index([validationStatus])
  @@map("court_cards")
}

// ============================================
// DAILY DIGEST SYSTEM
// ============================================

model DailyDigestQueue {
  id                    String        @id @default(uuid())
  courtRepId            String        @map("court_rep_id")
  digestDate            DateTime      @map("digest_date") @db.Date
  
  attendanceRecordIds   String[]      @map("attendance_record_ids")
  
  status                DigestStatus  @default(PENDING)
  sentAt                DateTime?     @map("sent_at")
  errorMessage          String?       @map("error_message") @db.Text
  retryCount            Int           @default(0) @map("retry_count")
  
  createdAt             DateTime      @default(now()) @map("created_at")
  
  // Relations
  courtRep              User          @relation(fields: [courtRepId], references: [id], onDelete: Cascade)
  
  @@index([courtRepId])
  @@index([digestDate])
  @@index([status])
  @@map("daily_digest_queue")
}

// ============================================
// APPROVED COURT DOMAINS
// ============================================

model ApprovedCourtDomain {
  id            String   @id @default(uuid())
  domain        String   @unique
  state         String
  organization  String
  contactEmail  String?  @map("contact_email")
  
  isActive      Boolean  @default(true) @map("is_active")
  addedAt       DateTime @default(now()) @map("added_at")
  addedBy       String?  @map("added_by") // Admin user ID
  
  @@index([domain])
  @@index([state])
  @@map("approved_court_domains")
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id            String   @id @default(uuid())
  userId        String?  @map("user_id")
  userEmail     String?  @map("user_email")
  userType      String?  @map("user_type")
  
  action        String   // LOGIN, REGISTER, CREATE_MEETING, etc.
  resource      String   // users, attendance_records, court_cards, etc.
  resourceId    String?  @map("resource_id")
  
  details       Json?    // Additional context
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent") @db.Text
  
  timestamp     DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id            String   @id @default(uuid())
  key           String   @unique
  value         String   @db.Text
  description   String?  @db.Text
  
  updatedAt     DateTime @updatedAt @map("updated_at")
  updatedBy     String?  @map("updated_by")
  
  @@map("system_config")
}
